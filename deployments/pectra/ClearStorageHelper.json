{
  "address": "0x163a9682d66f27C468b84828Ae3F1060Dbd0FEa0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountStorageCleared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "clearSafeStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearSafeStorageDelegateCallReciever",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "slots",
          "type": "bytes32[]"
        }
      ],
      "name": "clearStorageSlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "85bc457e0c0ef74e136185c59ff1ffda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountStorageCleared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clearSafeStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearSafeStorageDelegateCallReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slots\",\"type\":\"bytes32[]\"}],\"name\":\"clearStorageSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearStorageHelper.sol\":\"ClearStorageHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xae0c704f3e4ec6b1436bbbd10b153feaa665ac36e556ccc4f2155e4c02f5c46a\",\"license\":\"LGPL-3.0-only\"},\"contracts/ClearSafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.27;\\n\\nimport {SafeStorage} from \\\"@safe-global/safe-contracts/contracts/libraries/SafeStorage.sol\\\";\\nimport {ISafe} from \\\"./interfaces/ISafe.sol\\\";\\n\\ncontract ClearSafeStorage is SafeStorage {\\n    address internal immutable SELF;\\n    address internal constant SENTINEL_ADDRESS = address(0x1);\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    event AccountStorageCleared(address indexed account);\\n\\n    constructor() {\\n        SELF = address(this);\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable via delegatecall only.\\n     * If the function is called via a regular call, it will revert.\\n     */\\n    modifier onlyDelegateCall() {\\n        require(address(this) != SELF, \\\"clearSafeStorageDelegateCallReciever should only be called via delegatecall\\\");\\n        _;\\n    }\\n\\n    function _clearStorage() internal {\\n        address safe = msg.sender;\\n        ISafe(safe).execTransactionFromModule(address(this), 0, abi.encode(this.clearSafeStorageDelegateCallReciever.selector), 1);\\n    }\\n\\n    function _removeAllOwners() internal {\\n        address owner = owners[SENTINEL_ADDRESS];\\n        if (owner == address(0)) return;\\n\\n        address prevOwner = SENTINEL_ADDRESS;\\n\\n        while (owner != SENTINEL_ADDRESS) {\\n            prevOwner = owner;\\n            address temp = owners[owner];\\n            owners[owner] = address(0);\\n            owner = temp;\\n        }\\n        owners[SENTINEL_ADDRESS] = address(0);\\n    }\\n\\n    function _removeAllModules() internal {\\n        address module = modules[SENTINEL_ADDRESS];\\n        if (module == address(0)) return;\\n\\n        address prevModule = SENTINEL_ADDRESS;\\n\\n        while (module != SENTINEL_ADDRESS) {\\n            prevModule = module;\\n            address temp = modules[module];\\n            modules[module] = address(0);\\n            module = temp;\\n        }\\n        modules[SENTINEL_ADDRESS] = address(0);\\n    }\\n\\n    function _clearSafeStorage() internal {\\n        // slot 0\\n        // singleton = address(0);\\n        // slot 1\\n        _removeAllModules();\\n        // clears slot 2 owners mapping\\n        _removeAllOwners();\\n        // slot 3 - Owner count\\n        ownerCount = 0;\\n        // slot 4 - threshold\\n        threshold = 0;\\n        // slot 5 - nonce\\n        nonce = 0;\\n        // slot 6 - _deprecatedDomainSeparator\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(6, 0)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        // TODO: clear slot 7 - mapping(bytes32 => uint256) internal signedMessages;\\n        // TODO: clear slot 8 - mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, 0x01)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, 0)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        emit AccountStorageCleared(address(this));\\n    }\\n\\n    function clearSafeStorageDelegateCallReciever() external onlyDelegateCall {\\n        _clearSafeStorage();\\n    }\\n}\\n\",\"keccak256\":\"0x5db0494e76c8215ceb49223b1bbceb21e8b9b0101ae86577ddf8c629227f72db\",\"license\":\"LGPL-3.0-only\"},\"contracts/ClearStorageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.27;\\n\\nimport {ClearSafeStorage} from \\\"./ClearSafeStorage.sol\\\";\\n\\ncontract ClearStorageHelper is ClearSafeStorage {\\n    function clearSafeStorage() external {\\n        _clearSafeStorage();\\n    }\\n\\n    function clearStorageSlots(bytes32[] memory slots) external {\\n        // TODO: Validate signature\\n        for (uint256 i = 0; i < slots.length; i++) {\\n            bytes32 slot = slots[i];\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sstore(slot, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180d81b39df460c8493729a0ef7c0408b9cc801c5f6566c1036799c34e12f8e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.27;\\n\\ninterface ISafe {\\n    /**\\n     * @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint8 operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) external view;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns array of modules.\\n     * @param start Start of the page.\\n     * @param pageSize Maximum number of modules that should be returned.\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be enabled.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getStorageAt(uint256 offset, uint256 length) external view returns (bytes memory);\\n\\n    function nonce() external view returns (uint256);\\n\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool);\\n\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint8 operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    function setFallbackHandler(address handler) external;\\n\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    function isOwner(address owner) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4b206c871862616de6e2d368f7855a637f4dcf7591b7ceec6615cb61f59ca626\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b50306080526080516105e361002e600039600060c801526105e36000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806324f30d311461004657806360e61bd014610050578063af535ca914610063575b600080fd5b61004e61006b565b005b61004e61005e366004610493565b610075565b61004e6100b1565b6100736101a0565b565b60005b81518110156100ad5760008282815181106100955761009561057e565b60209081029190910101516000905550600101610078565b5050565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361006b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f636c6561725361666553746f7261676544656c656761746543616c6c5265636960448201527f657665722073686f756c64206f6e6c792062652063616c6c656420766961206460648201527f656c656761746563616c6c000000000000000000000000000000000000000000608482015260a40160405180910390fd5b6101a8610238565b6101b061034e565b6000600381905560048190556005819055600681905560017f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5557f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c881905560405130917f9fe882a15d23ea569936bd044460fe3a10f89eca83ee94d343ce024620eb28dc91a2565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5473ffffffffffffffffffffffffffffffffffffffff16806102825750565b60015b73ffffffffffffffffffffffffffffffffffffffff82166001146102f9575073ffffffffffffffffffffffffffffffffffffffff808216600090815260016020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000081169091551690610285565b5050600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05473ffffffffffffffffffffffffffffffffffffffff16806103985750565b60015b73ffffffffffffffffffffffffffffffffffffffff821660011461040f575073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000008116909155169061039b565b5050600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156104a557600080fd5b813567ffffffffffffffff8111156104bc57600080fd5b8201601f810184136104cd57600080fd5b803567ffffffffffffffff8111156104e7576104e7610464565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff8211171561053257610532610464565b60405291825260208184018101929081018784111561055057600080fd5b6020850194505b8385101561057357843580825260209586019590935001610557565b509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122026336200f10b6522e5ca28c5f3d74c53770d121766c4a6d275552b439404692664736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806324f30d311461004657806360e61bd014610050578063af535ca914610063575b600080fd5b61004e61006b565b005b61004e61005e366004610493565b610075565b61004e6100b1565b6100736101a0565b565b60005b81518110156100ad5760008282815181106100955761009561057e565b60209081029190910101516000905550600101610078565b5050565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361006b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f636c6561725361666553746f7261676544656c656761746543616c6c5265636960448201527f657665722073686f756c64206f6e6c792062652063616c6c656420766961206460648201527f656c656761746563616c6c000000000000000000000000000000000000000000608482015260a40160405180910390fd5b6101a8610238565b6101b061034e565b6000600381905560048190556005819055600681905560017f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5557f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c881905560405130917f9fe882a15d23ea569936bd044460fe3a10f89eca83ee94d343ce024620eb28dc91a2565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5473ffffffffffffffffffffffffffffffffffffffff16806102825750565b60015b73ffffffffffffffffffffffffffffffffffffffff82166001146102f9575073ffffffffffffffffffffffffffffffffffffffff808216600090815260016020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000081169091551690610285565b5050600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05473ffffffffffffffffffffffffffffffffffffffff16806103985750565b60015b73ffffffffffffffffffffffffffffffffffffffff821660011461040f575073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000008116909155169061039b565b5050600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156104a557600080fd5b813567ffffffffffffffff8111156104bc57600080fd5b8201601f810184136104cd57600080fd5b803567ffffffffffffffff8111156104e7576104e7610464565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff8211171561053257610532610464565b60405291825260208184018101929081018784111561055057600080fd5b6020850194505b8385101561057357843580825260209586019590935001610557565b509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122026336200f10b6522e5ca28c5f3d74c53770d121766c4a6d275552b439404692664736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2860,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2864,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "modules",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2868,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2870,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "ownerCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2872,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "threshold",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2874,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "nonce",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2876,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "_deprecatedDomainSeparator",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 2880,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "signedMessages",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2886,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "approvedHashes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}