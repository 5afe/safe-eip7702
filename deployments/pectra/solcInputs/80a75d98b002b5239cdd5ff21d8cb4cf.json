{
  "language": "Solidity",
  "sources": {
    "contracts/FallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.27;\n\nimport {IInteroperableDelegatedAccount} from \"./interfaces/IInteroperableDelegatedAccount.sol\";\n\ncontract FallbackHandler is IInteroperableDelegatedAccount {\n    function accountId() external view returns (string memory) {\n        return \"\";\n    }\n\n    function accountStorageBases() external view returns (bytes32[] memory) {\n        return new bytes32[](0);\n    }\n\n    function onRedelegation() external returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/Imports.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.27;\n\n// import {Safe} from \"@safe-global/safe-contracts/contracts/Safe.sol\";\n// import {SafeProxyFactory} from \"@safe-global/safe-contracts/contracts/proxies/SafeProxyFactory.sol\";\n"
    },
    "contracts/interfaces/IInteroperableDelegatedAccount.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.27;\n\ninterface IInteroperableDelegatedAccount {\n    /*\n     * @dev    Provides the namespace of the account.\n     *         namespace of accounts can possibly include, account version, account name, wallet vendor name, etc\n     * @notice this standard does not standardize the namespace format\n     * e.g.,   \"v0.1.2.7702Account.WalletProjectA\"\n     */\n    function accountId() external view returns (string memory);\n\n    /*\n     * @dev    Externally shares the storage base of the account.\n     *         Majority of 7702 accounts will have their distinctive storage base to reduce the chance of storage collision.\n     *         This allows the external entities to know what the storage base is of the account.\n     *         Wallets willing to redelegate already-delegated accounts should call accountStorageBase() to check if it confirms with the account it plans to redelegate.\n     *\n     *         The bytes32 array should be stored at the storage slot: keccak(keccak('InteroperableDelegatedAccount.ERC.Storage')-1) & ~0xff\n     *         This is an append-only array so newly redelegated accounts should not overwrite the storage at this slot, but just append their base to the array.\n     *         This append operation should be done during the initialization of the account.\n     */\n    function accountStorageBases() external view returns (bytes32[] memory);\n\n    /*\n     * @dev    Function called before redelegation.\n     *         This function should prepare the account for a delegation to a different implementation.\n     *         This function could be triggered by the new wallet that wants to redelegate an already delegated EOA.\n     *         It should uninitialize storages if needed and execute wallet-specific logic to prepare for redelegation.\n     *         msg.sender should be the owner of the account.\n     */\n    function onRedelegation() external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}