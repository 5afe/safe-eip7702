{
  "address": "0x0d79C99652Cc7c4e502670Ff05428b290e4a64C6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountStorageCleared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "clearSafeStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearSafeStorageDelegateCallReciever",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "slots",
          "type": "bytes32[]"
        }
      ],
      "name": "clearStorageSlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x73ca160ec50b14cb4034022875d02eeca45b057f374fb6fb9f2ca3fea25954d7",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x779F8fcbd0227f5874576605243Cb06D3Bf62768",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "385720",
    "logsBloom": "0x
    "blockHash": "0x416af7043eab9a661aa36522a6b757885db269ec5a2e5f8de78da52b3004c431",
    "transactionHash": "0x73ca160ec50b14cb4034022875d02eeca45b057f374fb6fb9f2ca3fea25954d7",
    "logs": [],
    "blockNumber": 2205992,
    "cumulativeGasUsed": "429574",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "edb9bd3b51f4f5c6c0dbce426f41ac01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountStorageCleared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clearSafeStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearSafeStorageDelegateCallReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slots\",\"type\":\"bytes32[]\"}],\"name\":\"clearStorageSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearStorageHelper.sol\":\"ClearStorageHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@safe-global/safe-smart-account/contracts/interfaces/IFallbackManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IFallbackManager {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) external;\\n}\\n\",\"keccak256\":\"0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-smart-account/contracts/interfaces/IGuardManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n/* solhint-disable one-contract-per-file */\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IGuardManager {\\n    event ChangedGuard(address indexed guard);\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external;\\n}\\n\",\"keccak256\":\"0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-smart-account/contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\n\\n/**\\n * @title IModuleManager - An interface of contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \\u26a0\\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IModuleManager {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n    event ChangedModuleGuard(address indexed moduleGuard);\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) external;\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) external;\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\\n\\n    /**\\n     * @dev Set a module guard that checks transactions initiated by the module before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \\u26a0\\ufe0f IMPORTANT: Since a module guard has full power to block Safe transaction execution initiatied via a module,\\n     *        a broken module guard can cause a denial of service for the Safe modules. Make sure to carefully\\n     *        audit the module guard code and design recovery mechanisms.\\n     * @notice Set Module Guard `moduleGuard` for the Safe. Make sure you trust the module guard.\\n     * @param moduleGuard The address of the module guard to be used or the zero address to disable the module guard.\\n     */\\n    function setModuleGuard(address moduleGuard) external;\\n}\\n\",\"keccak256\":\"0xf54fec9a87bbbb9585dd6223f75a178992e5de6ba8670aeb2197d0ba8b538251\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-smart-account/contracts/interfaces/IOwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\\n * @author @safe-global/safe-protocol\\n */\\ninterface IOwnerManager {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-smart-account/contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"./../libraries/Enum.sol\\\";\\nimport {IFallbackManager} from \\\"./IFallbackManager.sol\\\";\\nimport {IGuardManager} from \\\"./IGuardManager.sol\\\";\\nimport {IModuleManager} from \\\"./IModuleManager.sol\\\";\\nimport {IOwnerManager} from \\\"./IOwnerManager.sol\\\";\\n\\n/**\\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\\n * @author @safe-global/safe-protocol\\n */\\ninterface ISafe is IModuleManager, IGuardManager, IOwnerManager, IFallbackManager {\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param executor Address that executing the transaction.\\n     *        \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f Make sure that the executor address is a legitmate executor.\\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. \\u26a0\\ufe0f\\u26a0\\ufe0f\\u26a0\\ufe0f\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external;\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * External getter function for state variables.\\n     */\\n\\n    /**\\n     * @notice Returns the version of the Safe contract.\\n     * @return Version string.\\n     */\\n    // solhint-disable-next-line\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the nonce of the Safe contract.\\n     * @return Nonce.\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is signed by the owner.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner signed the hash.\\n     */\\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns a uint if the messageHash is approved by the owner.\\n     * @param owner Owner address that should be checked.\\n     * @param messageHash Hash of message that should be checked.\\n     * @return Number denoting if an owner approved the hash.\\n     */\\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfa79ca5f90a5b269b4f9c519df65fdb2f5b7e9f20d3c7bd95edc530e4f006773\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-smart-account/contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\\n * @author @safe-global/safe-protocol\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"keccak256\":\"0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261\",\"license\":\"LGPL-3.0-only\"},\"@safe-global/safe-smart-account/contracts/libraries/SafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\\n * @dev Should be always the first base contract of a library that is used with a Safe.\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract SafeStorage {\\n    // From /common/Singleton.sol\\n    address internal singleton;\\n    // From /common/ModuleManager.sol\\n    mapping(address => address) internal modules;\\n    // From /common/OwnerManager.sol\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    // From /Safe.sol\\n    uint256 internal nonce;\\n    bytes32 internal _deprecatedDomainSeparator;\\n    mapping(bytes32 => uint256) internal signedMessages;\\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n}\\n\",\"keccak256\":\"0xd2e19f98127e3edf29613dd9c91f74853574a5116a96541a5fadb3133abfc752\",\"license\":\"LGPL-3.0-only\"},\"contracts/ClearSafeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.27;\\n\\nimport {SafeStorage} from \\\"@safe-global/safe-smart-account/contracts/libraries/SafeStorage.sol\\\";\\nimport {ISafe} from \\\"@safe-global/safe-smart-account/contracts/interfaces/ISafe.sol\\\";\\nimport {Enum} from \\\"@safe-global/safe-smart-account/contracts/libraries/Enum.sol\\\";\\n\\ncontract ClearSafeStorage is SafeStorage {\\n    address internal immutable SELF;\\n    address internal constant SENTINEL_ADDRESS = address(0x1);\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    event AccountStorageCleared(address indexed account);\\n\\n    constructor() {\\n        SELF = address(this);\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable via delegatecall only.\\n     * If the function is called via a regular call, it will revert.\\n     */\\n    modifier onlyDelegateCall() {\\n        require(address(this) != SELF, \\\"clearSafeStorageDelegateCallReciever should only be called via delegatecall\\\");\\n        _;\\n    }\\n\\n    function _clearStorage() internal {\\n        address safe = msg.sender;\\n        ISafe(safe).execTransactionFromModule(\\n            address(this),\\n            0,\\n            abi.encode(this.clearSafeStorageDelegateCallReciever.selector),\\n            Enum.Operation.DelegateCall\\n        );\\n    }\\n\\n    function _removeAllOwners() internal {\\n        address owner = owners[SENTINEL_ADDRESS];\\n        if (owner == address(0)) return;\\n\\n        address prevOwner = SENTINEL_ADDRESS;\\n\\n        while (owner != SENTINEL_ADDRESS) {\\n            prevOwner = owner;\\n            address temp = owners[owner];\\n            owners[owner] = address(0);\\n            owner = temp;\\n        }\\n        owners[SENTINEL_ADDRESS] = address(0);\\n    }\\n\\n    function _removeAllModules() internal {\\n        address module = modules[SENTINEL_ADDRESS];\\n        if (module == address(0)) return;\\n\\n        address prevModule = SENTINEL_ADDRESS;\\n\\n        while (module != SENTINEL_ADDRESS) {\\n            prevModule = module;\\n            address temp = modules[module];\\n            modules[module] = address(0);\\n            module = temp;\\n        }\\n        modules[SENTINEL_ADDRESS] = address(0);\\n    }\\n\\n    function _clearSafeStorage() internal {\\n        // slot 0\\n        singleton = address(0);\\n        // slot 1\\n        _removeAllModules();\\n        // clears slot 2 owners mapping\\n        _removeAllOwners();\\n        // slot 3 - Owner count\\n        ownerCount = 0;\\n        // slot 4 - threshold\\n        threshold = 0;\\n        // slot 5 - nonce\\n        nonce = 0;\\n        // slot 6 - _deprecatedDomainSeparator\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(6, 0)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        // TODO: clear slot 7 - mapping(bytes32 => uint256) internal signedMessages;\\n        // TODO: clear slot 8 - mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, 0)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        /* solhint-disable no-inline-assembly */\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(GUARD_STORAGE_SLOT, 0)\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        emit AccountStorageCleared(address(this));\\n    }\\n\\n    function clearSafeStorageDelegateCallReciever() external onlyDelegateCall {\\n        _clearSafeStorage();\\n    }\\n}\\n\",\"keccak256\":\"0x393b1c5ee7aa0ecd7d1b5539f0f8ed78c95484727824936b95a4c37c2f7d7e8a\",\"license\":\"LGPL-3.0-only\"},\"contracts/ClearStorageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.27;\\n\\nimport {ClearSafeStorage} from \\\"./ClearSafeStorage.sol\\\";\\n\\ncontract ClearStorageHelper is ClearSafeStorage {\\n    function clearSafeStorage() external {\\n        _clearSafeStorage();\\n    }\\n\\n    function clearStorageSlots(bytes32[] memory slots) external {\\n        // TODO: Validate signature\\n        for (uint256 i = 0; i < slots.length; i++) {\\n            bytes32 slot = slots[i];\\n            /* solhint-disable no-inline-assembly */\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sstore(slot, 0)\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180d81b39df460c8493729a0ef7c0408b9cc801c5f6566c1036799c34e12f8e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b503060805260805161060b61002e600039600060c8015261060b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806324f30d311461004657806360e61bd014610050578063af535ca914610063575b600080fd5b61004e61006b565b005b61004e61005e3660046104bb565b610075565b61004e6100b1565b6100736101a0565b565b60005b81518110156100ad576000828281518110610095576100956105a6565b60209081029190910101516000905550600101610078565b5050565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361006b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f636c6561725361666553746f7261676544656c656761746543616c6c5265636960448201527f657665722073686f756c64206f6e6c792062652063616c6c656420766961206460648201527f656c656761746563616c6c000000000000000000000000000000000000000000608482015260a40160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556101d0610260565b6101d8610376565b600060038190556004819055600581905560068190557f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d58190557f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c881905560405130917f9fe882a15d23ea569936bd044460fe3a10f89eca83ee94d343ce024620eb28dc91a2565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5473ffffffffffffffffffffffffffffffffffffffff16806102aa5750565b60015b73ffffffffffffffffffffffffffffffffffffffff8216600114610321575073ffffffffffffffffffffffffffffffffffffffff808216600090815260016020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915516906102ad565b5050600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05473ffffffffffffffffffffffffffffffffffffffff16806103c05750565b60015b73ffffffffffffffffffffffffffffffffffffffff8216600114610437575073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915516906103c3565b5050600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156104cd57600080fd5b813567ffffffffffffffff8111156104e457600080fd5b8201601f810184136104f557600080fd5b803567ffffffffffffffff81111561050f5761050f61048c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff8211171561055a5761055a61048c565b60405291825260208184018101929081018784111561057857600080fd5b6020850194505b8385101561059b5784358082526020958601959093500161057f565b509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212205ef0fb0672301031f561c41ff3ca85dfe8951f9c6730d3663e3ce2366cbc223e64736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806324f30d311461004657806360e61bd014610050578063af535ca914610063575b600080fd5b61004e61006b565b005b61004e61005e3660046104bb565b610075565b61004e6100b1565b6100736101a0565b565b60005b81518110156100ad576000828281518110610095576100956105a6565b60209081029190910101516000905550600101610078565b5050565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361006b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f636c6561725361666553746f7261676544656c656761746543616c6c5265636960448201527f657665722073686f756c64206f6e6c792062652063616c6c656420766961206460648201527f656c656761746563616c6c000000000000000000000000000000000000000000608482015260a40160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556101d0610260565b6101d8610376565b600060038190556004819055600581905560068190557f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d58190557f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c881905560405130917f9fe882a15d23ea569936bd044460fe3a10f89eca83ee94d343ce024620eb28dc91a2565b600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5473ffffffffffffffffffffffffffffffffffffffff16806102aa5750565b60015b73ffffffffffffffffffffffffffffffffffffffff8216600114610321575073ffffffffffffffffffffffffffffffffffffffff808216600090815260016020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915516906102ad565b5050600160008190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05473ffffffffffffffffffffffffffffffffffffffff16806103c05750565b60015b73ffffffffffffffffffffffffffffffffffffffff8216600114610437575073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000811690915516906103c3565b5050600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156104cd57600080fd5b813567ffffffffffffffff8111156104e457600080fd5b8201601f810184136104f557600080fd5b803567ffffffffffffffff81111561050f5761050f61048c565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff8211171561055a5761055a61048c565b60405291825260208184018101929081018784111561057857600080fd5b6020850194505b8385101561059b5784358082526020958601959093500161057f565b509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212205ef0fb0672301031f561c41ff3ca85dfe8951f9c6730d3663e3ce2366cbc223e64736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 909,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 913,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "modules",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 917,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 919,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "ownerCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 921,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "threshold",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 923,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "nonce",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 925,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "_deprecatedDomainSeparator",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 929,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "signedMessages",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 935,
        "contract": "contracts/ClearStorageHelper.sol:ClearStorageHelper",
        "label": "approvedHashes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}