{
  "address": "0xc06515Bb23D60B0E0E2542f8775e0177c233e015",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract SafeEIP7702Proxy",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "singleton",
          "type": "address"
        }
      ],
      "name": "ProxyCreation",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_singleton",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initializer",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "saltNonce",
          "type": "uint256"
        }
      ],
      "name": "createChainSpecificProxyWithNonce",
      "outputs": [
        {
          "internalType": "contract SafeEIP7702Proxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_singleton",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initializer",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "saltNonce",
          "type": "uint256"
        }
      ],
      "name": "createProxyWithNonce",
      "outputs": [
        {
          "internalType": "contract SafeEIP7702Proxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyCreationCode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "185f0aa182df3248eccb12cccdb155b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract SafeEIP7702Proxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"ProxyCreation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initializer\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"saltNonce\",\"type\":\"uint256\"}],\"name\":\"createChainSpecificProxyWithNonce\",\"outputs\":[{\"internalType\":\"contract SafeEIP7702Proxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initializer\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"saltNonce\",\"type\":\"uint256\"}],\"name\":\"createProxyWithNonce\",\"outputs\":[{\"internalType\":\"contract SafeEIP7702Proxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChainSpecificProxyWithNonce(address,bytes,uint256)\":{\"details\":\"Allows to create a new proxy contract that should exist only on 1 network (e.g. specific governance or admin accounts)      by including the chain id in the create2 salt. Such proxies cannot be created on other networks by replaying the transaction.\",\"params\":{\"_singleton\":\"Address of singleton contract. Must be deployed at the time of execution.\",\"initializer\":\"Payload for a message call to be sent to a new proxy contract.\",\"saltNonce\":\"Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\"}},\"createProxyWithNonce(address,bytes,uint256)\":{\"params\":{\"_singleton\":\"Address of singleton contract. Must be deployed at the time of execution.\",\"initializer\":\"Payload for a message call to be sent to a new proxy contract.\",\"saltNonce\":\"Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\"}},\"getChainId()\":{\"returns\":{\"_0\":\"The ID of the current chain as a uint256.\"}},\"proxyCreationCode()\":{\"details\":\"Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\"}},\"title\":\"Safe EIP7702 Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createChainSpecificProxyWithNonce(address,bytes,uint256)\":{\"notice\":\"Deploys a new chain-specific proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy.\"},\"createProxyWithNonce(address,bytes,uint256)\":{\"notice\":\"Deploys a new proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy.\"},\"getChainId()\":{\"notice\":\"Returns the ID of the chain the contract is currently deployed on.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeEIP7702ProxyFactory.sol\":\"SafeEIP7702ProxyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@safe-global/safe-contracts/contracts/proxies/SafeProxy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IProxy - Helper interface to access the singleton address of the Proxy on-chain.\\n * @author Richard Meissner - @rmeissner\\n */\\ninterface IProxy {\\n    function masterCopy() external view returns (address);\\n}\\n\\n/**\\n * @title SafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\\n * @author Stefan George - <stefan@gnosis.io>\\n * @author Richard Meissner - <richard@gnosis.io>\\n */\\ncontract SafeProxy {\\n    // Singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\n    address internal singleton;\\n\\n    /**\\n     * @notice Constructor function sets address of singleton contract.\\n     * @param _singleton Singleton address.\\n     */\\n    constructor(address _singleton) {\\n        require(_singleton != address(0), \\\"Invalid singleton address provided\\\");\\n        singleton = _singleton;\\n    }\\n\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\n    fallback() external payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\\n                mstore(0, _singleton)\\n                return(0, 0x20)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5dccbe86285c1d4c4b2fed0ae8007620c3186d22411f43feecfbf8a028e5c7e2\",\"license\":\"LGPL-3.0-only\"},\"contracts/SafeEIP7702Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.27;\\nimport {SafeProxy} from \\\"@safe-global/safe-contracts/contracts/proxies/SafeProxy.sol\\\";\\n\\ncontract SafeEIP7702Proxy is SafeProxy {\\n    bytes32 internal immutable SETUP_DATA_HASH;\\n    address internal immutable SINGLETON;\\n\\n    error InvalidSetupData(bytes32 expectedHash, bytes32 receivedHash);\\n\\n    constructor(bytes32 setupDataHash, address singleton) SafeProxy(singleton) {\\n        SETUP_DATA_HASH = setupDataHash;\\n        SINGLETON = singleton;\\n    }\\n\\n    function setup(\\n        address[] calldata /*_owners*/,\\n        uint256 /*_threshold*/,\\n        address /*to*/,\\n        bytes calldata /*data*/,\\n        address /*fallbackHandler*/,\\n        address /*paymentToken*/,\\n        uint256 /*payment*/,\\n        address payable /*paymentReceiver*/\\n    ) external {\\n        bytes32 hash = keccak256(msg.data);\\n        require(hash == SETUP_DATA_HASH, InvalidSetupData(SETUP_DATA_HASH, hash));\\n\\n        singleton = SINGLETON;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b0841923cf78c4eb3b97401b46f7d75ab7afed549194aa6087bc77e87a78266\",\"license\":\"LGPL-3.0-only\"},\"contracts/SafeEIP7702ProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.27;\\n\\nimport {SafeEIP7702Proxy} from \\\"./SafeEIP7702Proxy.sol\\\";\\n\\n/**\\n * @title Safe EIP7702 Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.\\n */\\ncontract SafeEIP7702ProxyFactory {\\n    event ProxyCreation(SafeEIP7702Proxy indexed proxy, address singleton);\\n\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\n    function proxyCreationCode() public pure returns (bytes memory) {\\n        return type(SafeEIP7702Proxy).creationCode;\\n    }\\n\\n    /**\\n     * @notice Internal method to create a new proxy contract using CREATE2. Optionally executes an initializer call to a new proxy.\\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\\n     * @param initializer (Optional) Payload for a message call to be sent to a new proxy contract.\\n     * @param salt Create2 salt to use for calculating the address of the new proxy contract.\\n     * @return proxy Address of the new proxy contract.\\n     */\\n    function deployProxy(address _singleton, bytes memory initializer, bytes32 salt) internal returns (SafeEIP7702Proxy proxy) {\\n        require(isContract(_singleton), \\\"Singleton contract not deployed\\\");\\n\\n        bytes memory deploymentData = abi.encodePacked(\\n            type(SafeEIP7702Proxy).creationCode,\\n            uint256(keccak256(initializer)),\\n            uint256(uint160(_singleton))\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n\\n        if (initializer.length > 0) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\\n                    revert(0, 0)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Deploys a new proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy.\\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\\n     * @param initializer Payload for a message call to be sent to a new proxy contract.\\n     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n     */\\n    function createProxyWithNonce(address _singleton, bytes memory initializer, uint256 saltNonce) public returns (SafeEIP7702Proxy proxy) {\\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\\n        proxy = deployProxy(_singleton, initializer, salt);\\n        emit ProxyCreation(proxy, _singleton);\\n    }\\n\\n    /**\\n     * @notice Deploys a new chain-specific proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy.\\n     * @dev Allows to create a new proxy contract that should exist only on 1 network (e.g. specific governance or admin accounts)\\n     *      by including the chain id in the create2 salt. Such proxies cannot be created on other networks by replaying the transaction.\\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\\n     * @param initializer Payload for a message call to be sent to a new proxy contract.\\n     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\n     */\\n    function createChainSpecificProxyWithNonce(\\n        address _singleton,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) public returns (SafeEIP7702Proxy proxy) {\\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce, getChainId()));\\n        proxy = deployProxy(_singleton, initializer, salt);\\n        emit ProxyCreation(proxy, _singleton);\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     * @return True if `account` is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x36b558f6517efbed5afc0f6c3b42ec8f01daed805fd33e758f937c7bfdaec1f6\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50610a358061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b9146100515780633408e4701461008e57806353e5d9351461009c578063ec9e80bb146100b1575b600080fd5b61006461005f3660046103a8565b6100c4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b604051468152602001610085565b6100a4610166565b60405161008591906104f8565b6100646100bf3660046103a8565b6101ae565b6000808380519060200120836040516020016100ea929190918252602082015260400190565b60405160208183030381529060405280519060200120905061010d8585836101e0565b60405173ffffffffffffffffffffffffffffffffffffffff8781168252919350908316907f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2359060200160405180910390a2509392505050565b6060604051806020016101789061036c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052919050565b6000808380519060200120836101c14690565b60408051602081019490945283019190915260608201526080016100ea565b6000833b61024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f7965640060448201526064015b60405180910390fd5b6000604051806020016102619061036c565b6020820181038252601f19601f82011660405250848051906020012060001c8673ffffffffffffffffffffffffffffffffffffffff166040516020016102a993929190610549565b6040516020818303038152906040529050828151826020016000f5915073ffffffffffffffffffffffffffffffffffffffff8216610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f437265617465322063616c6c206661696c6564000000000000000000000000006044820152606401610246565b8351156103645760008060008651602088016000875af10361036457600080fd5b509392505050565b61048f8061057183390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156103bd57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff811681146103e157600080fd5b9250602084013567ffffffffffffffff8111156103fd57600080fd5b8401601f8101861361040e57600080fd5b803567ffffffffffffffff81111561042857610428610379565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff8211171561049457610494610379565b6040528181528282016020018810156104ac57600080fd5b8160208401602083013760009181016020019190915293969395505050506040919091013590565b60005b838110156104ef5781810151838201526020016104d7565b50506000910152565b60208152600082518060208401526105178160408501602087016104d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000845161055b8184602089016104d4565b9190910192835250602082015260400191905056fe60c060405234801561001057600080fd5b5060405161048f38038061048f83398101604081905261002f916100c0565b806001600160a01b0381166100955760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b039283161790556080929092521660a0526100fd565b600080604083850312156100d357600080fd5b825160208401519092506001600160a01b03811681146100f257600080fd5b809150509250929050565b60805160a05161036e61012160003960006101600152600060d0015261036e6000f3fe60806040526004361061001e5760003560e01c8063b63e800d1461008f575b73ffffffffffffffffffffffffffffffffffffffff600054167fa619486e000000000000000000000000000000000000000000000000000000006000350361006a578060005260206000f35b3660008037600080366000845af490503d6000803e80610089573d6000fd5b503d6000f35b34801561009b57600080fd5b506100af6100aa36600461022b565b6100b1565b005b600080366040516100c3929190610328565b60405190819003902090507f000000000000000000000000000000000000000000000000000000000000000081818114610136576040517fad43fc9a0000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440160405180910390fd5b5050600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690811782559036908037600080366000845af490503d6000803e80610089573d6000fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146101dd57600080fd5b919050565b60008083601f8401126101f457600080fd5b50813567ffffffffffffffff81111561020c57600080fd5b60208301915083602082850101111561022457600080fd5b9250929050565b6000806000806000806000806000806101008b8d03121561024b57600080fd5b8a3567ffffffffffffffff81111561026257600080fd5b8b01601f81018d1361027357600080fd5b803567ffffffffffffffff81111561028a57600080fd5b8d60208260051b840101111561029f57600080fd5b60209182019b5099508b013597506102b960408c016101b9565b965060608b013567ffffffffffffffff8111156102d557600080fd5b6102e18d828e016101e2565b90975095506102f4905060808c016101b9565b935061030260a08c016101b9565b925060c08b0135915061031760e08c016101b9565b90509295989b9194979a5092959850565b818382376000910190815291905056fea26469706673582212209559a3d725a6d9d9866b6205a7c0609b5537c79d708bb2a5592eed247e956ec364736f6c634300081b0033a2646970667358221220c3db3616a1b87685885da2b1824e431c4c70b75f2cf92485807d4846e79f694064736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b9146100515780633408e4701461008e57806353e5d9351461009c578063ec9e80bb146100b1575b600080fd5b61006461005f3660046103a8565b6100c4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b604051468152602001610085565b6100a4610166565b60405161008591906104f8565b6100646100bf3660046103a8565b6101ae565b6000808380519060200120836040516020016100ea929190918252602082015260400190565b60405160208183030381529060405280519060200120905061010d8585836101e0565b60405173ffffffffffffffffffffffffffffffffffffffff8781168252919350908316907f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2359060200160405180910390a2509392505050565b6060604051806020016101789061036c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052919050565b6000808380519060200120836101c14690565b60408051602081019490945283019190915260608201526080016100ea565b6000833b61024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f7965640060448201526064015b60405180910390fd5b6000604051806020016102619061036c565b6020820181038252601f19601f82011660405250848051906020012060001c8673ffffffffffffffffffffffffffffffffffffffff166040516020016102a993929190610549565b6040516020818303038152906040529050828151826020016000f5915073ffffffffffffffffffffffffffffffffffffffff8216610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f437265617465322063616c6c206661696c6564000000000000000000000000006044820152606401610246565b8351156103645760008060008651602088016000875af10361036457600080fd5b509392505050565b61048f8061057183390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156103bd57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff811681146103e157600080fd5b9250602084013567ffffffffffffffff8111156103fd57600080fd5b8401601f8101861361040e57600080fd5b803567ffffffffffffffff81111561042857610428610379565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff8211171561049457610494610379565b6040528181528282016020018810156104ac57600080fd5b8160208401602083013760009181016020019190915293969395505050506040919091013590565b60005b838110156104ef5781810151838201526020016104d7565b50506000910152565b60208152600082518060208401526105178160408501602087016104d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000845161055b8184602089016104d4565b9190910192835250602082015260400191905056fe60c060405234801561001057600080fd5b5060405161048f38038061048f83398101604081905261002f916100c0565b806001600160a01b0381166100955760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b039283161790556080929092521660a0526100fd565b600080604083850312156100d357600080fd5b825160208401519092506001600160a01b03811681146100f257600080fd5b809150509250929050565b60805160a05161036e61012160003960006101600152600060d0015261036e6000f3fe60806040526004361061001e5760003560e01c8063b63e800d1461008f575b73ffffffffffffffffffffffffffffffffffffffff600054167fa619486e000000000000000000000000000000000000000000000000000000006000350361006a578060005260206000f35b3660008037600080366000845af490503d6000803e80610089573d6000fd5b503d6000f35b34801561009b57600080fd5b506100af6100aa36600461022b565b6100b1565b005b600080366040516100c3929190610328565b60405190819003902090507f000000000000000000000000000000000000000000000000000000000000000081818114610136576040517fad43fc9a0000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440160405180910390fd5b5050600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690811782559036908037600080366000845af490503d6000803e80610089573d6000fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146101dd57600080fd5b919050565b60008083601f8401126101f457600080fd5b50813567ffffffffffffffff81111561020c57600080fd5b60208301915083602082850101111561022457600080fd5b9250929050565b6000806000806000806000806000806101008b8d03121561024b57600080fd5b8a3567ffffffffffffffff81111561026257600080fd5b8b01601f81018d1361027357600080fd5b803567ffffffffffffffff81111561028a57600080fd5b8d60208260051b840101111561029f57600080fd5b60209182019b5099508b013597506102b960408c016101b9565b965060608b013567ffffffffffffffff8111156102d557600080fd5b6102e18d828e016101e2565b90975095506102f4905060808c016101b9565b935061030260a08c016101b9565b925060c08b0135915061031760e08c016101b9565b90509295989b9194979a5092959850565b818382376000910190815291905056fea26469706673582212209559a3d725a6d9d9866b6205a7c0609b5537c79d708bb2a5592eed247e956ec364736f6c634300081b0033a2646970667358221220c3db3616a1b87685885da2b1824e431c4c70b75f2cf92485807d4846e79f694064736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChainSpecificProxyWithNonce(address,bytes,uint256)": {
        "details": "Allows to create a new proxy contract that should exist only on 1 network (e.g. specific governance or admin accounts)      by including the chain id in the create2 salt. Such proxies cannot be created on other networks by replaying the transaction.",
        "params": {
          "_singleton": "Address of singleton contract. Must be deployed at the time of execution.",
          "initializer": "Payload for a message call to be sent to a new proxy contract.",
          "saltNonce": "Nonce that will be used to generate the salt to calculate the address of the new proxy contract."
        }
      },
      "createProxyWithNonce(address,bytes,uint256)": {
        "params": {
          "_singleton": "Address of singleton contract. Must be deployed at the time of execution.",
          "initializer": "Payload for a message call to be sent to a new proxy contract.",
          "saltNonce": "Nonce that will be used to generate the salt to calculate the address of the new proxy contract."
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "The ID of the current chain as a uint256."
        }
      },
      "proxyCreationCode()": {
        "details": "Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address."
      }
    },
    "title": "Safe EIP7702 Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createChainSpecificProxyWithNonce(address,bytes,uint256)": {
        "notice": "Deploys a new chain-specific proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy."
      },
      "createProxyWithNonce(address,bytes,uint256)": {
        "notice": "Deploys a new proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy."
      },
      "getChainId()": {
        "notice": "Returns the ID of the chain the contract is currently deployed on."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}